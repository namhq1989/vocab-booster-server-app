// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: subscriptionpb/hub.proto

package subscriptionpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SubscriptionService_CreateUserSubscription_FullMethodName = "/subscriptionpb.SubscriptionService/CreateUserSubscription"
	SubscriptionService_FindUserSubscription_FullMethodName   = "/subscriptionpb.SubscriptionService/FindUserSubscription"
)

// SubscriptionServiceClient is the client API for SubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionServiceClient interface {
	CreateUserSubscription(ctx context.Context, in *CreateUserSubscriptionRequest, opts ...grpc.CallOption) (*CreateUserSubscriptionResponse, error)
	FindUserSubscription(ctx context.Context, in *FindUserSubscriptionRequest, opts ...grpc.CallOption) (*FindUserSubscriptionResponse, error)
}

type subscriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionServiceClient(cc grpc.ClientConnInterface) SubscriptionServiceClient {
	return &subscriptionServiceClient{cc}
}

func (c *subscriptionServiceClient) CreateUserSubscription(ctx context.Context, in *CreateUserSubscriptionRequest, opts ...grpc.CallOption) (*CreateUserSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserSubscriptionResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_CreateUserSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) FindUserSubscription(ctx context.Context, in *FindUserSubscriptionRequest, opts ...grpc.CallOption) (*FindUserSubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindUserSubscriptionResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_FindUserSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionServiceServer is the server API for SubscriptionService service.
// All implementations should embed UnimplementedSubscriptionServiceServer
// for forward compatibility
type SubscriptionServiceServer interface {
	CreateUserSubscription(context.Context, *CreateUserSubscriptionRequest) (*CreateUserSubscriptionResponse, error)
	FindUserSubscription(context.Context, *FindUserSubscriptionRequest) (*FindUserSubscriptionResponse, error)
}

// UnimplementedSubscriptionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSubscriptionServiceServer struct {
}

func (UnimplementedSubscriptionServiceServer) CreateUserSubscription(context.Context, *CreateUserSubscriptionRequest) (*CreateUserSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserSubscription not implemented")
}
func (UnimplementedSubscriptionServiceServer) FindUserSubscription(context.Context, *FindUserSubscriptionRequest) (*FindUserSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserSubscription not implemented")
}

// UnsafeSubscriptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionServiceServer will
// result in compilation errors.
type UnsafeSubscriptionServiceServer interface {
	mustEmbedUnimplementedSubscriptionServiceServer()
}

func RegisterSubscriptionServiceServer(s grpc.ServiceRegistrar, srv SubscriptionServiceServer) {
	s.RegisterService(&SubscriptionService_ServiceDesc, srv)
}

func _SubscriptionService_CreateUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).CreateUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_CreateUserSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).CreateUserSubscription(ctx, req.(*CreateUserSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_FindUserSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).FindUserSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_FindUserSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).FindUserSubscription(ctx, req.(*FindUserSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionService_ServiceDesc is the grpc.ServiceDesc for SubscriptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subscriptionpb.SubscriptionService",
	HandlerType: (*SubscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserSubscription",
			Handler:    _SubscriptionService_CreateUserSubscription_Handler,
		},
		{
			MethodName: "FindUserSubscription",
			Handler:    _SubscriptionService_FindUserSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subscriptionpb/hub.proto",
}
