// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: gamificationpb/hub.proto

package gamificationpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GamificationService_GetUserStats_FullMethodName             = "/gamificationpb.GamificationService/GetUserStats"
	GamificationService_GetUserRecentPointsChart_FullMethodName = "/gamificationpb.GamificationService/GetUserRecentPointsChart"
)

// GamificationServiceClient is the client API for GamificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GamificationServiceClient interface {
	GetUserStats(ctx context.Context, in *GetUserStatsRequest, opts ...grpc.CallOption) (*GetUserStatsResponse, error)
	GetUserRecentPointsChart(ctx context.Context, in *GetUserRecentPointsChartRequest, opts ...grpc.CallOption) (*GetUserRecentPointsChartResponse, error)
}

type gamificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGamificationServiceClient(cc grpc.ClientConnInterface) GamificationServiceClient {
	return &gamificationServiceClient{cc}
}

func (c *gamificationServiceClient) GetUserStats(ctx context.Context, in *GetUserStatsRequest, opts ...grpc.CallOption) (*GetUserStatsResponse, error) {
	out := new(GetUserStatsResponse)
	err := c.cc.Invoke(ctx, GamificationService_GetUserStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gamificationServiceClient) GetUserRecentPointsChart(ctx context.Context, in *GetUserRecentPointsChartRequest, opts ...grpc.CallOption) (*GetUserRecentPointsChartResponse, error) {
	out := new(GetUserRecentPointsChartResponse)
	err := c.cc.Invoke(ctx, GamificationService_GetUserRecentPointsChart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GamificationServiceServer is the server API for GamificationService service.
// All implementations should embed UnimplementedGamificationServiceServer
// for forward compatibility
type GamificationServiceServer interface {
	GetUserStats(context.Context, *GetUserStatsRequest) (*GetUserStatsResponse, error)
	GetUserRecentPointsChart(context.Context, *GetUserRecentPointsChartRequest) (*GetUserRecentPointsChartResponse, error)
}

// UnimplementedGamificationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGamificationServiceServer struct {
}

func (UnimplementedGamificationServiceServer) GetUserStats(context.Context, *GetUserStatsRequest) (*GetUserStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStats not implemented")
}
func (UnimplementedGamificationServiceServer) GetUserRecentPointsChart(context.Context, *GetUserRecentPointsChartRequest) (*GetUserRecentPointsChartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRecentPointsChart not implemented")
}

// UnsafeGamificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GamificationServiceServer will
// result in compilation errors.
type UnsafeGamificationServiceServer interface {
	mustEmbedUnimplementedGamificationServiceServer()
}

func RegisterGamificationServiceServer(s grpc.ServiceRegistrar, srv GamificationServiceServer) {
	s.RegisterService(&GamificationService_ServiceDesc, srv)
}

func _GamificationService_GetUserStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamificationServiceServer).GetUserStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GamificationService_GetUserStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamificationServiceServer).GetUserStats(ctx, req.(*GetUserStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GamificationService_GetUserRecentPointsChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRecentPointsChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamificationServiceServer).GetUserRecentPointsChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GamificationService_GetUserRecentPointsChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamificationServiceServer).GetUserRecentPointsChart(ctx, req.(*GetUserRecentPointsChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GamificationService_ServiceDesc is the grpc.ServiceDesc for GamificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GamificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gamificationpb.GamificationService",
	HandlerType: (*GamificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserStats",
			Handler:    _GamificationService_GetUserStats_Handler,
		},
		{
			MethodName: "GetUserRecentPointsChart",
			Handler:    _GamificationService_GetUserRecentPointsChart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gamificationpb/hub.proto",
}
