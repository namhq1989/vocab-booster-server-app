// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: gamificationpb/hub.proto

package gamificationpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GamificationService_GetUserPoint_FullMethodName = "/gamificationpb.GamificationService/GetUserPoint"
)

// GamificationServiceClient is the client API for GamificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GamificationServiceClient interface {
	GetUserPoint(ctx context.Context, in *GetUserPointRequest, opts ...grpc.CallOption) (*GetUserPointResponse, error)
}

type gamificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGamificationServiceClient(cc grpc.ClientConnInterface) GamificationServiceClient {
	return &gamificationServiceClient{cc}
}

func (c *gamificationServiceClient) GetUserPoint(ctx context.Context, in *GetUserPointRequest, opts ...grpc.CallOption) (*GetUserPointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPointResponse)
	err := c.cc.Invoke(ctx, GamificationService_GetUserPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GamificationServiceServer is the server API for GamificationService service.
// All implementations should embed UnimplementedGamificationServiceServer
// for forward compatibility
type GamificationServiceServer interface {
	GetUserPoint(context.Context, *GetUserPointRequest) (*GetUserPointResponse, error)
}

// UnimplementedGamificationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGamificationServiceServer struct {
}

func (UnimplementedGamificationServiceServer) GetUserPoint(context.Context, *GetUserPointRequest) (*GetUserPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPoint not implemented")
}

// UnsafeGamificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GamificationServiceServer will
// result in compilation errors.
type UnsafeGamificationServiceServer interface {
	mustEmbedUnimplementedGamificationServiceServer()
}

func RegisterGamificationServiceServer(s grpc.ServiceRegistrar, srv GamificationServiceServer) {
	s.RegisterService(&GamificationService_ServiceDesc, srv)
}

func _GamificationService_GetUserPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamificationServiceServer).GetUserPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GamificationService_GetUserPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamificationServiceServer).GetUserPoint(ctx, req.(*GetUserPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GamificationService_ServiceDesc is the grpc.ServiceDesc for GamificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GamificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gamificationpb.GamificationService",
	HandlerType: (*GamificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserPoint",
			Handler:    _GamificationService_GetUserPoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gamificationpb/hub.proto",
}
