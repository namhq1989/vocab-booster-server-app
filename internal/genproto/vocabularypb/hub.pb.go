// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: vocabularypb/hub.proto

package vocabularypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SearchVocabularyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PerformerId string `protobuf:"bytes,1,opt,name=performerId,proto3" json:"performerId,omitempty"`
	Term        string `protobuf:"bytes,2,opt,name=term,proto3" json:"term,omitempty"`
}

func (x *SearchVocabularyRequest) Reset() {
	*x = SearchVocabularyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchVocabularyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchVocabularyRequest) ProtoMessage() {}

func (x *SearchVocabularyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchVocabularyRequest.ProtoReflect.Descriptor instead.
func (*SearchVocabularyRequest) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{0}
}

func (x *SearchVocabularyRequest) GetPerformerId() string {
	if x != nil {
		return x.PerformerId
	}
	return ""
}

func (x *SearchVocabularyRequest) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

type SearchVocabularyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Found       bool        `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
	Suggestions []string    `protobuf:"bytes,2,rep,name=suggestions,proto3" json:"suggestions,omitempty"`
	Vocabulary  *Vocabulary `protobuf:"bytes,3,opt,name=vocabulary,proto3" json:"vocabulary,omitempty"`
}

func (x *SearchVocabularyResponse) Reset() {
	*x = SearchVocabularyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchVocabularyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchVocabularyResponse) ProtoMessage() {}

func (x *SearchVocabularyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchVocabularyResponse.ProtoReflect.Descriptor instead.
func (*SearchVocabularyResponse) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{1}
}

func (x *SearchVocabularyResponse) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

func (x *SearchVocabularyResponse) GetSuggestions() []string {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

func (x *SearchVocabularyResponse) GetVocabulary() *Vocabulary {
	if x != nil {
		return x.Vocabulary
	}
	return nil
}

type BookmarkVocabularyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	VocabularyId string `protobuf:"bytes,2,opt,name=vocabularyId,proto3" json:"vocabularyId,omitempty"`
}

func (x *BookmarkVocabularyRequest) Reset() {
	*x = BookmarkVocabularyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookmarkVocabularyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookmarkVocabularyRequest) ProtoMessage() {}

func (x *BookmarkVocabularyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookmarkVocabularyRequest.ProtoReflect.Descriptor instead.
func (*BookmarkVocabularyRequest) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{2}
}

func (x *BookmarkVocabularyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BookmarkVocabularyRequest) GetVocabularyId() string {
	if x != nil {
		return x.VocabularyId
	}
	return ""
}

type BookmarkVocabularyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsBookmarked bool `protobuf:"varint,1,opt,name=isBookmarked,proto3" json:"isBookmarked,omitempty"`
}

func (x *BookmarkVocabularyResponse) Reset() {
	*x = BookmarkVocabularyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookmarkVocabularyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookmarkVocabularyResponse) ProtoMessage() {}

func (x *BookmarkVocabularyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookmarkVocabularyResponse.ProtoReflect.Descriptor instead.
func (*BookmarkVocabularyResponse) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{3}
}

func (x *BookmarkVocabularyResponse) GetIsBookmarked() bool {
	if x != nil {
		return x.IsBookmarked
	}
	return false
}

type GetUserBookmarkedVocabulariesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=pageToken,proto3" json:"pageToken,omitempty"`
}

func (x *GetUserBookmarkedVocabulariesRequest) Reset() {
	*x = GetUserBookmarkedVocabulariesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBookmarkedVocabulariesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBookmarkedVocabulariesRequest) ProtoMessage() {}

func (x *GetUserBookmarkedVocabulariesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBookmarkedVocabulariesRequest.ProtoReflect.Descriptor instead.
func (*GetUserBookmarkedVocabulariesRequest) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{4}
}

func (x *GetUserBookmarkedVocabulariesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserBookmarkedVocabulariesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type GetUserBookmarkedVocabulariesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vocabularies  []*VocabularyBrief `protobuf:"bytes,1,rep,name=vocabularies,proto3" json:"vocabularies,omitempty"`
	NextPageToken string             `protobuf:"bytes,2,opt,name=nextPageToken,proto3" json:"nextPageToken,omitempty"`
}

func (x *GetUserBookmarkedVocabulariesResponse) Reset() {
	*x = GetUserBookmarkedVocabulariesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBookmarkedVocabulariesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBookmarkedVocabulariesResponse) ProtoMessage() {}

func (x *GetUserBookmarkedVocabulariesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBookmarkedVocabulariesResponse.ProtoReflect.Descriptor instead.
func (*GetUserBookmarkedVocabulariesResponse) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{5}
}

func (x *GetUserBookmarkedVocabulariesResponse) GetVocabularies() []*VocabularyBrief {
	if x != nil {
		return x.Vocabularies
	}
	return nil
}

func (x *GetUserBookmarkedVocabulariesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetWordOfTheDayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lang string `protobuf:"bytes,1,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *GetWordOfTheDayRequest) Reset() {
	*x = GetWordOfTheDayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWordOfTheDayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWordOfTheDayRequest) ProtoMessage() {}

func (x *GetWordOfTheDayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWordOfTheDayRequest.ProtoReflect.Descriptor instead.
func (*GetWordOfTheDayRequest) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{6}
}

func (x *GetWordOfTheDayRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type GetWordOfTheDayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vocabulary  *VocabularyBrief `protobuf:"bytes,1,opt,name=vocabulary,proto3" json:"vocabulary,omitempty"`
	Information *Multilingual    `protobuf:"bytes,2,opt,name=information,proto3" json:"information,omitempty"`
}

func (x *GetWordOfTheDayResponse) Reset() {
	*x = GetWordOfTheDayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWordOfTheDayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWordOfTheDayResponse) ProtoMessage() {}

func (x *GetWordOfTheDayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWordOfTheDayResponse.ProtoReflect.Descriptor instead.
func (*GetWordOfTheDayResponse) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{7}
}

func (x *GetWordOfTheDayResponse) GetVocabulary() *VocabularyBrief {
	if x != nil {
		return x.Vocabulary
	}
	return nil
}

func (x *GetWordOfTheDayResponse) GetInformation() *Multilingual {
	if x != nil {
		return x.Information
	}
	return nil
}

type GetCommunitySentencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VocabularyId string `protobuf:"bytes,1,opt,name=vocabularyId,proto3" json:"vocabularyId,omitempty"`
	UserId       string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Lang         string `protobuf:"bytes,3,opt,name=lang,proto3" json:"lang,omitempty"`
	PageToken    string `protobuf:"bytes,4,opt,name=pageToken,proto3" json:"pageToken,omitempty"`
}

func (x *GetCommunitySentencesRequest) Reset() {
	*x = GetCommunitySentencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommunitySentencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommunitySentencesRequest) ProtoMessage() {}

func (x *GetCommunitySentencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommunitySentencesRequest.ProtoReflect.Descriptor instead.
func (*GetCommunitySentencesRequest) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{8}
}

func (x *GetCommunitySentencesRequest) GetVocabularyId() string {
	if x != nil {
		return x.VocabularyId
	}
	return ""
}

func (x *GetCommunitySentencesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetCommunitySentencesRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *GetCommunitySentencesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type GetCommunitySentencesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sentences     []*CommunitySentenceBrief `protobuf:"bytes,1,rep,name=sentences,proto3" json:"sentences,omitempty"`
	NextPageToken string                    `protobuf:"bytes,2,opt,name=nextPageToken,proto3" json:"nextPageToken,omitempty"`
}

func (x *GetCommunitySentencesResponse) Reset() {
	*x = GetCommunitySentencesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommunitySentencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommunitySentencesResponse) ProtoMessage() {}

func (x *GetCommunitySentencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommunitySentencesResponse.ProtoReflect.Descriptor instead.
func (*GetCommunitySentencesResponse) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{9}
}

func (x *GetCommunitySentencesResponse) GetSentences() []*CommunitySentenceBrief {
	if x != nil {
		return x.Sentences
	}
	return nil
}

func (x *GetCommunitySentencesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetCommunitySentenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SentenceId string `protobuf:"bytes,1,opt,name=sentenceId,proto3" json:"sentenceId,omitempty"`
	UserId     string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GetCommunitySentenceRequest) Reset() {
	*x = GetCommunitySentenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommunitySentenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommunitySentenceRequest) ProtoMessage() {}

func (x *GetCommunitySentenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommunitySentenceRequest.ProtoReflect.Descriptor instead.
func (*GetCommunitySentenceRequest) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{10}
}

func (x *GetCommunitySentenceRequest) GetSentenceId() string {
	if x != nil {
		return x.SentenceId
	}
	return ""
}

func (x *GetCommunitySentenceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetCommunitySentenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sentence *CommunitySentence `protobuf:"bytes,1,opt,name=sentence,proto3" json:"sentence,omitempty"`
}

func (x *GetCommunitySentenceResponse) Reset() {
	*x = GetCommunitySentenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommunitySentenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommunitySentenceResponse) ProtoMessage() {}

func (x *GetCommunitySentenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommunitySentenceResponse.ProtoReflect.Descriptor instead.
func (*GetCommunitySentenceResponse) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{11}
}

func (x *GetCommunitySentenceResponse) GetSentence() *CommunitySentence {
	if x != nil {
		return x.Sentence
	}
	return nil
}

var File_vocabularypb_hub_proto protoreflect.FileDescriptor

var file_vocabularypb_hub_proto_rawDesc = []byte{
	0x0a, 0x16, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2f, 0x68,
	0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75,
	0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x1a, 0x1a, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61,
	0x72, 0x79, 0x70, 0x62, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x4f, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x6f, 0x63, 0x61,
	0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x72, 0x6d, 0x22, 0x8c, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x6f,
	0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x76, 0x6f, 0x63, 0x61,
	0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76,
	0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x63, 0x61,
	0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x0a, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61,
	0x72, 0x79, 0x22, 0x57, 0x0a, 0x19, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x56, 0x6f,
	0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x63, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76,
	0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x1a, 0x42,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x42,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x22, 0x5c, 0x0a,
	0x24, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x64, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x25,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x64, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x6f,
	0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x63, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x79, 0x42, 0x72, 0x69, 0x65, 0x66, 0x52, 0x0c, 0x76, 0x6f, 0x63, 0x61,
	0x62, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2c,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x44, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x96, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x44, 0x61, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x76, 0x6f, 0x63, 0x61,
	0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76,
	0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x63, 0x61,
	0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x42, 0x72, 0x69, 0x65, 0x66, 0x52, 0x0a, 0x76, 0x6f, 0x63,
	0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76,
	0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x75, 0x61, 0x6c, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75,
	0x6c, 0x61, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f,
	0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x6f, 0x63, 0x61,
	0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x72, 0x69, 0x65, 0x66, 0x52,
	0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x55, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x6f, 0x63, 0x61,
	0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x32, 0xb7, 0x05, 0x0a, 0x11, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c,
	0x61, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x12, 0x25,
	0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61,
	0x72, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x6f, 0x63, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x69, 0x0a, 0x12, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x56, 0x6f, 0x63, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x79, 0x12, 0x27, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61,
	0x72, 0x79, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x56, 0x6f, 0x63,
	0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x42, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64,
	0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x76,
	0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x56, 0x6f, 0x63,
	0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x64, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x64, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x44, 0x61, 0x79, 0x12, 0x24, 0x2e, 0x76, 0x6f, 0x63,
	0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72,
	0x64, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x44, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x44, 0x61, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x2a, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61,
	0x72, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xaf,
	0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72,
	0x79, 0x70, 0x62, 0x42, 0x08, 0x48, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x41, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x2d, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x61, 0x70, 0x70, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x76, 0x6f,
	0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x2f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c,
	0x61, 0x72, 0x79, 0x70, 0x62, 0x2f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79,
	0x70, 0x62, 0xa2, 0x02, 0x03, 0x56, 0x58, 0x58, 0xaa, 0x02, 0x0c, 0x56, 0x6f, 0x63, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0xca, 0x02, 0x0c, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75,
	0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0xe2, 0x02, 0x18, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c,
	0x61, 0x72, 0x79, 0x70, 0x62, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x0c, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vocabularypb_hub_proto_rawDescOnce sync.Once
	file_vocabularypb_hub_proto_rawDescData = file_vocabularypb_hub_proto_rawDesc
)

func file_vocabularypb_hub_proto_rawDescGZIP() []byte {
	file_vocabularypb_hub_proto_rawDescOnce.Do(func() {
		file_vocabularypb_hub_proto_rawDescData = protoimpl.X.CompressGZIP(file_vocabularypb_hub_proto_rawDescData)
	})
	return file_vocabularypb_hub_proto_rawDescData
}

var file_vocabularypb_hub_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_vocabularypb_hub_proto_goTypes = []interface{}{
	(*SearchVocabularyRequest)(nil),               // 0: vocabularypb.SearchVocabularyRequest
	(*SearchVocabularyResponse)(nil),              // 1: vocabularypb.SearchVocabularyResponse
	(*BookmarkVocabularyRequest)(nil),             // 2: vocabularypb.BookmarkVocabularyRequest
	(*BookmarkVocabularyResponse)(nil),            // 3: vocabularypb.BookmarkVocabularyResponse
	(*GetUserBookmarkedVocabulariesRequest)(nil),  // 4: vocabularypb.GetUserBookmarkedVocabulariesRequest
	(*GetUserBookmarkedVocabulariesResponse)(nil), // 5: vocabularypb.GetUserBookmarkedVocabulariesResponse
	(*GetWordOfTheDayRequest)(nil),                // 6: vocabularypb.GetWordOfTheDayRequest
	(*GetWordOfTheDayResponse)(nil),               // 7: vocabularypb.GetWordOfTheDayResponse
	(*GetCommunitySentencesRequest)(nil),          // 8: vocabularypb.GetCommunitySentencesRequest
	(*GetCommunitySentencesResponse)(nil),         // 9: vocabularypb.GetCommunitySentencesResponse
	(*GetCommunitySentenceRequest)(nil),           // 10: vocabularypb.GetCommunitySentenceRequest
	(*GetCommunitySentenceResponse)(nil),          // 11: vocabularypb.GetCommunitySentenceResponse
	(*Vocabulary)(nil),                            // 12: vocabularypb.Vocabulary
	(*VocabularyBrief)(nil),                       // 13: vocabularypb.VocabularyBrief
	(*Multilingual)(nil),                          // 14: vocabularypb.Multilingual
	(*CommunitySentenceBrief)(nil),                // 15: vocabularypb.CommunitySentenceBrief
	(*CommunitySentence)(nil),                     // 16: vocabularypb.CommunitySentence
}
var file_vocabularypb_hub_proto_depIdxs = []int32{
	12, // 0: vocabularypb.SearchVocabularyResponse.vocabulary:type_name -> vocabularypb.Vocabulary
	13, // 1: vocabularypb.GetUserBookmarkedVocabulariesResponse.vocabularies:type_name -> vocabularypb.VocabularyBrief
	13, // 2: vocabularypb.GetWordOfTheDayResponse.vocabulary:type_name -> vocabularypb.VocabularyBrief
	14, // 3: vocabularypb.GetWordOfTheDayResponse.information:type_name -> vocabularypb.Multilingual
	15, // 4: vocabularypb.GetCommunitySentencesResponse.sentences:type_name -> vocabularypb.CommunitySentenceBrief
	16, // 5: vocabularypb.GetCommunitySentenceResponse.sentence:type_name -> vocabularypb.CommunitySentence
	0,  // 6: vocabularypb.VocabularyService.SearchVocabulary:input_type -> vocabularypb.SearchVocabularyRequest
	2,  // 7: vocabularypb.VocabularyService.BookmarkVocabulary:input_type -> vocabularypb.BookmarkVocabularyRequest
	4,  // 8: vocabularypb.VocabularyService.GetUserBookmarkedVocabularies:input_type -> vocabularypb.GetUserBookmarkedVocabulariesRequest
	6,  // 9: vocabularypb.VocabularyService.GetWordOfTheDay:input_type -> vocabularypb.GetWordOfTheDayRequest
	8,  // 10: vocabularypb.VocabularyService.GetCommunitySentences:input_type -> vocabularypb.GetCommunitySentencesRequest
	10, // 11: vocabularypb.VocabularyService.GetCommunitySentence:input_type -> vocabularypb.GetCommunitySentenceRequest
	1,  // 12: vocabularypb.VocabularyService.SearchVocabulary:output_type -> vocabularypb.SearchVocabularyResponse
	3,  // 13: vocabularypb.VocabularyService.BookmarkVocabulary:output_type -> vocabularypb.BookmarkVocabularyResponse
	5,  // 14: vocabularypb.VocabularyService.GetUserBookmarkedVocabularies:output_type -> vocabularypb.GetUserBookmarkedVocabulariesResponse
	7,  // 15: vocabularypb.VocabularyService.GetWordOfTheDay:output_type -> vocabularypb.GetWordOfTheDayResponse
	9,  // 16: vocabularypb.VocabularyService.GetCommunitySentences:output_type -> vocabularypb.GetCommunitySentencesResponse
	11, // 17: vocabularypb.VocabularyService.GetCommunitySentence:output_type -> vocabularypb.GetCommunitySentenceResponse
	12, // [12:18] is the sub-list for method output_type
	6,  // [6:12] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_vocabularypb_hub_proto_init() }
func file_vocabularypb_hub_proto_init() {
	if File_vocabularypb_hub_proto != nil {
		return
	}
	file_vocabularypb_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vocabularypb_hub_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchVocabularyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchVocabularyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookmarkVocabularyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookmarkVocabularyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBookmarkedVocabulariesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBookmarkedVocabulariesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWordOfTheDayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWordOfTheDayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommunitySentencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommunitySentencesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommunitySentenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCommunitySentenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vocabularypb_hub_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vocabularypb_hub_proto_goTypes,
		DependencyIndexes: file_vocabularypb_hub_proto_depIdxs,
		MessageInfos:      file_vocabularypb_hub_proto_msgTypes,
	}.Build()
	File_vocabularypb_hub_proto = out.File
	file_vocabularypb_hub_proto_rawDesc = nil
	file_vocabularypb_hub_proto_goTypes = nil
	file_vocabularypb_hub_proto_depIdxs = nil
}
