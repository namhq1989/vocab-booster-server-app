// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/subscription/domain/user_subscription_hub.go
//
// Generated by this command:
//
//	mockgen -source=pkg/subscription/domain/user_subscription_hub.go -destination=internal/mock/subscription/user_subscription_hub.go -package=mocksubscription
//

// Package mocksubscription is a generated GoMock package.
package mocksubscription

import (
	reflect "reflect"

	appcontext "github.com/namhq1989/vocab-booster-server-app/core/appcontext"
	domain "github.com/namhq1989/vocab-booster-server-app/pkg/subscription/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockUserSubscriptionHub is a mock of UserSubscriptionHub interface.
type MockUserSubscriptionHub struct {
	ctrl     *gomock.Controller
	recorder *MockUserSubscriptionHubMockRecorder
}

// MockUserSubscriptionHubMockRecorder is the mock recorder for MockUserSubscriptionHub.
type MockUserSubscriptionHubMockRecorder struct {
	mock *MockUserSubscriptionHub
}

// NewMockUserSubscriptionHub creates a new mock instance.
func NewMockUserSubscriptionHub(ctrl *gomock.Controller) *MockUserSubscriptionHub {
	mock := &MockUserSubscriptionHub{ctrl: ctrl}
	mock.recorder = &MockUserSubscriptionHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSubscriptionHub) EXPECT() *MockUserSubscriptionHubMockRecorder {
	return m.recorder
}

// CreateUserSubscription mocks base method.
func (m *MockUserSubscriptionHub) CreateUserSubscription(ctx *appcontext.AppContext, us domain.UserSubscription) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserSubscription", ctx, us)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserSubscription indicates an expected call of CreateUserSubscription.
func (mr *MockUserSubscriptionHubMockRecorder) CreateUserSubscription(ctx, us any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserSubscription", reflect.TypeOf((*MockUserSubscriptionHub)(nil).CreateUserSubscription), ctx, us)
}

// FindUserSubscriptionByUserID mocks base method.
func (m *MockUserSubscriptionHub) FindUserSubscriptionByUserID(ctx *appcontext.AppContext, userID string) (*domain.UserSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserSubscriptionByUserID", ctx, userID)
	ret0, _ := ret[0].(*domain.UserSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserSubscriptionByUserID indicates an expected call of FindUserSubscriptionByUserID.
func (mr *MockUserSubscriptionHubMockRecorder) FindUserSubscriptionByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserSubscriptionByUserID", reflect.TypeOf((*MockUserSubscriptionHub)(nil).FindUserSubscriptionByUserID), ctx, userID)
}
