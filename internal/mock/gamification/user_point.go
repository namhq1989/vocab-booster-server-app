// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/gamification/domain/user_point.go
//
// Generated by this command:
//
//	mockgen -source=pkg/gamification/domain/user_point.go -destination=internal/mock/gamification/user_point.go -package=mockgamification
//

// Package mockgamification is a generated GoMock package.
package mockgamification

import (
	reflect "reflect"

	domain "github.com/namhq1989/vocab-booster-server-app/pkg/gamification/domain"
	appcontext "github.com/namhq1989/vocab-booster-utilities/appcontext"
	gomock "go.uber.org/mock/gomock"
)

// MockUserPointRepository is a mock of UserPointRepository interface.
type MockUserPointRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserPointRepositoryMockRecorder
}

// MockUserPointRepositoryMockRecorder is the mock recorder for MockUserPointRepository.
type MockUserPointRepositoryMockRecorder struct {
	mock *MockUserPointRepository
}

// NewMockUserPointRepository creates a new mock instance.
func NewMockUserPointRepository(ctrl *gomock.Controller) *MockUserPointRepository {
	mock := &MockUserPointRepository{ctrl: ctrl}
	mock.recorder = &MockUserPointRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserPointRepository) EXPECT() *MockUserPointRepositoryMockRecorder {
	return m.recorder
}

// FindUserPoint mocks base method.
func (m *MockUserPointRepository) FindUserPoint(ctx *appcontext.AppContext, userID string) (*domain.UserPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserPoint", ctx, userID)
	ret0, _ := ret[0].(*domain.UserPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserPoint indicates an expected call of FindUserPoint.
func (mr *MockUserPointRepositoryMockRecorder) FindUserPoint(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserPoint", reflect.TypeOf((*MockUserPointRepository)(nil).FindUserPoint), ctx, userID)
}

// IncreasePoint mocks base method.
func (m *MockUserPointRepository) IncreasePoint(ctx *appcontext.AppContext, userID string, point int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreasePoint", ctx, userID, point)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreasePoint indicates an expected call of IncreasePoint.
func (mr *MockUserPointRepositoryMockRecorder) IncreasePoint(ctx, userID, point any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreasePoint", reflect.TypeOf((*MockUserPointRepository)(nil).IncreasePoint), ctx, userID, point)
}
