// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/gamification/domain/point.go
//
// Generated by this command:
//
//	mockgen -source=pkg/gamification/domain/point.go -destination=internal/mock/gamification/point.go -package=mockgamification
//

// Package mockgamification is a generated GoMock package.
package mockgamification

import (
	reflect "reflect"
	time "time"

	domain "github.com/namhq1989/vocab-booster-server-app/pkg/gamification/domain"
	appcontext "github.com/namhq1989/vocab-booster-utilities/appcontext"
	gomock "go.uber.org/mock/gomock"
)

// MockPointRepository is a mock of PointRepository interface.
type MockPointRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPointRepositoryMockRecorder
}

// MockPointRepositoryMockRecorder is the mock recorder for MockPointRepository.
type MockPointRepositoryMockRecorder struct {
	mock *MockPointRepository
}

// NewMockPointRepository creates a new mock instance.
func NewMockPointRepository(ctrl *gomock.Controller) *MockPointRepository {
	mock := &MockPointRepository{ctrl: ctrl}
	mock.recorder = &MockPointRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPointRepository) EXPECT() *MockPointRepositoryMockRecorder {
	return m.recorder
}

// AggregateUserPointsInTimeRange mocks base method.
func (m *MockPointRepository) AggregateUserPointsInTimeRange(ctx *appcontext.AppContext, userID string, from, to time.Time) ([]domain.UserAggregatedPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AggregateUserPointsInTimeRange", ctx, userID, from, to)
	ret0, _ := ret[0].([]domain.UserAggregatedPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AggregateUserPointsInTimeRange indicates an expected call of AggregateUserPointsInTimeRange.
func (mr *MockPointRepositoryMockRecorder) AggregateUserPointsInTimeRange(ctx, userID, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AggregateUserPointsInTimeRange", reflect.TypeOf((*MockPointRepository)(nil).AggregateUserPointsInTimeRange), ctx, userID, from, to)
}

// CreatePoint mocks base method.
func (m *MockPointRepository) CreatePoint(ctx *appcontext.AppContext, point domain.Point) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePoint", ctx, point)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePoint indicates an expected call of CreatePoint.
func (mr *MockPointRepositoryMockRecorder) CreatePoint(ctx, point any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePoint", reflect.TypeOf((*MockPointRepository)(nil).CreatePoint), ctx, point)
}
