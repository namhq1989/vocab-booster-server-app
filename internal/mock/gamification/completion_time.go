// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/gamification/domain/completion_time.go
//
// Generated by this command:
//
//	mockgen -source=pkg/gamification/domain/completion_time.go -destination=internal/mock/gamification/completion_time.go -package=mockgamification
//

// Package mockgamification is a generated GoMock package.
package mockgamification

import (
	reflect "reflect"

	domain "github.com/namhq1989/vocab-booster-server-app/pkg/gamification/domain"
	appcontext "github.com/namhq1989/vocab-booster-utilities/appcontext"
	gomock "go.uber.org/mock/gomock"
)

// MockCompletionTimeRepository is a mock of CompletionTimeRepository interface.
type MockCompletionTimeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCompletionTimeRepositoryMockRecorder
}

// MockCompletionTimeRepositoryMockRecorder is the mock recorder for MockCompletionTimeRepository.
type MockCompletionTimeRepositoryMockRecorder struct {
	mock *MockCompletionTimeRepository
}

// NewMockCompletionTimeRepository creates a new mock instance.
func NewMockCompletionTimeRepository(ctrl *gomock.Controller) *MockCompletionTimeRepository {
	mock := &MockCompletionTimeRepository{ctrl: ctrl}
	mock.recorder = &MockCompletionTimeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompletionTimeRepository) EXPECT() *MockCompletionTimeRepositoryMockRecorder {
	return m.recorder
}

// CreateCompletionTime mocks base method.
func (m *MockCompletionTimeRepository) CreateCompletionTime(ctx *appcontext.AppContext, completionTime domain.CompletionTime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCompletionTime", ctx, completionTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCompletionTime indicates an expected call of CreateCompletionTime.
func (mr *MockCompletionTimeRepositoryMockRecorder) CreateCompletionTime(ctx, completionTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCompletionTime", reflect.TypeOf((*MockCompletionTimeRepository)(nil).CreateCompletionTime), ctx, completionTime)
}
