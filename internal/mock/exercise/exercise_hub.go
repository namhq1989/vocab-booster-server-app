// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/exercise/domain/exercise_hub.go
//
// Generated by this command:
//
//	mockgen -source=pkg/exercise/domain/exercise_hub.go -destination=internal/mock/exercise/exercise_hub.go -package=mockexercise
//

// Package mockexercise is a generated GoMock package.
package mockexercise

import (
	reflect "reflect"

	domain "github.com/namhq1989/vocab-booster-server-app/pkg/exercise/domain"
	appcontext "github.com/namhq1989/vocab-booster-utilities/appcontext"
	gomock "go.uber.org/mock/gomock"
)

// MockExerciseHub is a mock of ExerciseHub interface.
type MockExerciseHub struct {
	ctrl     *gomock.Controller
	recorder *MockExerciseHubMockRecorder
}

// MockExerciseHubMockRecorder is the mock recorder for MockExerciseHub.
type MockExerciseHubMockRecorder struct {
	mock *MockExerciseHub
}

// NewMockExerciseHub creates a new mock instance.
func NewMockExerciseHub(ctrl *gomock.Controller) *MockExerciseHub {
	mock := &MockExerciseHub{ctrl: ctrl}
	mock.recorder = &MockExerciseHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExerciseHub) EXPECT() *MockExerciseHubMockRecorder {
	return m.recorder
}

// GetExercises mocks base method.
func (m *MockExerciseHub) GetExercises(ctx *appcontext.AppContext, userID, lang string) ([]domain.Exercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExercises", ctx, userID, lang)
	ret0, _ := ret[0].([]domain.Exercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExercises indicates an expected call of GetExercises.
func (mr *MockExerciseHubMockRecorder) GetExercises(ctx, userID, lang any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExercises", reflect.TypeOf((*MockExerciseHub)(nil).GetExercises), ctx, userID, lang)
}

// GetReadyForReviewExercises mocks base method.
func (m *MockExerciseHub) GetReadyForReviewExercises(ctx *appcontext.AppContext, userID, lang string) ([]domain.Exercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadyForReviewExercises", ctx, userID, lang)
	ret0, _ := ret[0].([]domain.Exercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadyForReviewExercises indicates an expected call of GetReadyForReviewExercises.
func (mr *MockExerciseHubMockRecorder) GetReadyForReviewExercises(ctx, userID, lang any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadyForReviewExercises", reflect.TypeOf((*MockExerciseHub)(nil).GetReadyForReviewExercises), ctx, userID, lang)
}
