// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/vocabulary/domain/vocabulary.go
//
// Generated by this command:
//
//	mockgen -source=pkg/vocabulary/domain/vocabulary.go -destination=internal/mock/vocabulary/vocabulary.go -package=mockvocabulary
//

// Package mockvocabulary is a generated GoMock package.
package mockvocabulary

import (
	reflect "reflect"

	domain "github.com/namhq1989/vocab-booster-server-app/pkg/vocabulary/domain"
	appcontext "github.com/namhq1989/vocab-booster-utilities/appcontext"
	gomock "go.uber.org/mock/gomock"
)

// MockVocabularyHub is a mock of VocabularyHub interface.
type MockVocabularyHub struct {
	ctrl     *gomock.Controller
	recorder *MockVocabularyHubMockRecorder
}

// MockVocabularyHubMockRecorder is the mock recorder for MockVocabularyHub.
type MockVocabularyHubMockRecorder struct {
	mock *MockVocabularyHub
}

// NewMockVocabularyHub creates a new mock instance.
func NewMockVocabularyHub(ctrl *gomock.Controller) *MockVocabularyHub {
	mock := &MockVocabularyHub{ctrl: ctrl}
	mock.recorder = &MockVocabularyHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVocabularyHub) EXPECT() *MockVocabularyHubMockRecorder {
	return m.recorder
}

// BookmarkVocabulary mocks base method.
func (m *MockVocabularyHub) BookmarkVocabulary(ctx *appcontext.AppContext, userID, vocabularyID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookmarkVocabulary", ctx, userID, vocabularyID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BookmarkVocabulary indicates an expected call of BookmarkVocabulary.
func (mr *MockVocabularyHubMockRecorder) BookmarkVocabulary(ctx, userID, vocabularyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookmarkVocabulary", reflect.TypeOf((*MockVocabularyHub)(nil).BookmarkVocabulary), ctx, userID, vocabularyID)
}

// GetCommunitySentence mocks base method.
func (m *MockVocabularyHub) GetCommunitySentence(ctx *appcontext.AppContext, userID, sentenceID string) (*domain.CommunitySentence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunitySentence", ctx, userID, sentenceID)
	ret0, _ := ret[0].(*domain.CommunitySentence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommunitySentence indicates an expected call of GetCommunitySentence.
func (mr *MockVocabularyHubMockRecorder) GetCommunitySentence(ctx, userID, sentenceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunitySentence", reflect.TypeOf((*MockVocabularyHub)(nil).GetCommunitySentence), ctx, userID, sentenceID)
}

// GetCommunitySentences mocks base method.
func (m *MockVocabularyHub) GetCommunitySentences(ctx *appcontext.AppContext, userID, vocabularyID, lang, pageToken string) ([]domain.CommunitySentenceBrief, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunitySentences", ctx, userID, vocabularyID, lang, pageToken)
	ret0, _ := ret[0].([]domain.CommunitySentenceBrief)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCommunitySentences indicates an expected call of GetCommunitySentences.
func (mr *MockVocabularyHubMockRecorder) GetCommunitySentences(ctx, userID, vocabularyID, lang, pageToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunitySentences", reflect.TypeOf((*MockVocabularyHub)(nil).GetCommunitySentences), ctx, userID, vocabularyID, lang, pageToken)
}

// GetUserBookmarkedVocabularies mocks base method.
func (m *MockVocabularyHub) GetUserBookmarkedVocabularies(ctx *appcontext.AppContext, userID, pageToken string) ([]domain.VocabularyBrief, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBookmarkedVocabularies", ctx, userID, pageToken)
	ret0, _ := ret[0].([]domain.VocabularyBrief)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserBookmarkedVocabularies indicates an expected call of GetUserBookmarkedVocabularies.
func (mr *MockVocabularyHubMockRecorder) GetUserBookmarkedVocabularies(ctx, userID, pageToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBookmarkedVocabularies", reflect.TypeOf((*MockVocabularyHub)(nil).GetUserBookmarkedVocabularies), ctx, userID, pageToken)
}

// GetUserCommunitySentencesDraft mocks base method.
func (m *MockVocabularyHub) GetUserCommunitySentencesDraft(ctx *appcontext.AppContext, userID, vocabularyID, pageToken string) ([]domain.CommunitySentenceDraft, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCommunitySentencesDraft", ctx, userID, vocabularyID, pageToken)
	ret0, _ := ret[0].([]domain.CommunitySentenceDraft)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserCommunitySentencesDraft indicates an expected call of GetUserCommunitySentencesDraft.
func (mr *MockVocabularyHubMockRecorder) GetUserCommunitySentencesDraft(ctx, userID, vocabularyID, pageToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCommunitySentencesDraft", reflect.TypeOf((*MockVocabularyHub)(nil).GetUserCommunitySentencesDraft), ctx, userID, vocabularyID, pageToken)
}

// GetWordOfTheDay mocks base method.
func (m *MockVocabularyHub) GetWordOfTheDay(ctx *appcontext.AppContext, lang string) (*domain.WordOfTheDay, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWordOfTheDay", ctx, lang)
	ret0, _ := ret[0].(*domain.WordOfTheDay)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWordOfTheDay indicates an expected call of GetWordOfTheDay.
func (mr *MockVocabularyHubMockRecorder) GetWordOfTheDay(ctx, lang any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWordOfTheDay", reflect.TypeOf((*MockVocabularyHub)(nil).GetWordOfTheDay), ctx, lang)
}

// SearchVocabulary mocks base method.
func (m *MockVocabularyHub) SearchVocabulary(ctx *appcontext.AppContext, performerID, term string) (*domain.Vocabulary, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchVocabulary", ctx, performerID, term)
	ret0, _ := ret[0].(*domain.Vocabulary)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchVocabulary indicates an expected call of SearchVocabulary.
func (mr *MockVocabularyHubMockRecorder) SearchVocabulary(ctx, performerID, term any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchVocabulary", reflect.TypeOf((*MockVocabularyHub)(nil).SearchVocabulary), ctx, performerID, term)
}
