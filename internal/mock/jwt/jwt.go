// Code generated by MockGen. DO NOT EDIT.
// Source: internal/utils/jwt/jwt.go
//
// Generated by this command:
//
//	mockgen -source=internal/utils/jwt/jwt.go -destination=internal/mock/jwt/jwt.go -package=mockjwt
//

// Package mockjwt is a generated GoMock package.
package mockjwt

import (
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	appjwt "github.com/namhq1989/vocab-booster-server-app/internal/utils/jwt"
	appcontext "github.com/namhq1989/vocab-booster-utilities/appcontext"
	gomock "go.uber.org/mock/gomock"
)

// MockOperations is a mock of Operations interface.
type MockOperations struct {
	ctrl     *gomock.Controller
	recorder *MockOperationsMockRecorder
}

// MockOperationsMockRecorder is the mock recorder for MockOperations.
type MockOperationsMockRecorder struct {
	mock *MockOperations
}

// NewMockOperations creates a new mock instance.
func NewMockOperations(ctrl *gomock.Controller) *MockOperations {
	mock := &MockOperations{ctrl: ctrl}
	mock.recorder = &MockOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperations) EXPECT() *MockOperationsMockRecorder {
	return m.recorder
}

// GenerateAccessToken mocks base method.
func (m *MockOperations) GenerateAccessToken(ctx *appcontext.AppContext, userID, timezone string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", ctx, userID, timezone)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockOperationsMockRecorder) GenerateAccessToken(ctx, userID, timezone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockOperations)(nil).GenerateAccessToken), ctx, userID, timezone)
}

// ParseAccessToken mocks base method.
func (m *MockOperations) ParseAccessToken(ctx *appcontext.AppContext, token string) (*appjwt.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAccessToken", ctx, token)
	ret0, _ := ret[0].(*appjwt.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAccessToken indicates an expected call of ParseAccessToken.
func (mr *MockOperationsMockRecorder) ParseAccessToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAccessToken", reflect.TypeOf((*MockOperations)(nil).ParseAccessToken), ctx, token)
}

// RequireLoggedIn mocks base method.
func (m *MockOperations) RequireLoggedIn(next echo.HandlerFunc) echo.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequireLoggedIn", next)
	ret0, _ := ret[0].(echo.HandlerFunc)
	return ret0
}

// RequireLoggedIn indicates an expected call of RequireLoggedIn.
func (mr *MockOperationsMockRecorder) RequireLoggedIn(next any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequireLoggedIn", reflect.TypeOf((*MockOperations)(nil).RequireLoggedIn), next)
}
