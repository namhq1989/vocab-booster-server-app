// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/user/domain/user_hub.go
//
// Generated by this command:
//
//	mockgen -source=pkg/user/domain/user_hub.go -destination=internal/mock/mongo/user_hub.go -package=mockmongo
//

// Package mockmongo is a generated GoMock package.
package mockmongo

import (
	reflect "reflect"

	appcontext "github.com/namhq1989/vocab-booster-server-app/core/appcontext"
	domain "github.com/namhq1989/vocab-booster-server-app/pkg/user/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockUserHub is a mock of UserHub interface.
type MockUserHub struct {
	ctrl     *gomock.Controller
	recorder *MockUserHubMockRecorder
}

// MockUserHubMockRecorder is the mock recorder for MockUserHub.
type MockUserHubMockRecorder struct {
	mock *MockUserHub
}

// NewMockUserHub creates a new mock instance.
func NewMockUserHub(ctrl *gomock.Controller) *MockUserHub {
	mock := &MockUserHub{ctrl: ctrl}
	mock.recorder = &MockUserHubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserHub) EXPECT() *MockUserHubMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserHub) CreateUser(ctx *appcontext.AppContext, user domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserHubMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserHub)(nil).CreateUser), ctx, user)
}

// FindUserByEmail mocks base method.
func (m *MockUserHub) FindUserByEmail(ctx *appcontext.AppContext, email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", ctx, email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockUserHubMockRecorder) FindUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockUserHub)(nil).FindUserByEmail), ctx, email)
}

// FindUserByID mocks base method.
func (m *MockUserHub) FindUserByID(ctx *appcontext.AppContext, userID string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", ctx, userID)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockUserHubMockRecorder) FindUserByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockUserHub)(nil).FindUserByID), ctx, userID)
}
